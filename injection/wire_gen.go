// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package injection

import (
	"github.com/arvians-id/go-gorm/cmd/config"
	"github.com/arvians-id/go-gorm/cmd/server"
	"github.com/arvians-id/go-gorm/internal/http/controller"
	"github.com/arvians-id/go-gorm/internal/repository"
	"github.com/arvians-id/go-gorm/internal/service"
	"github.com/go-chi/chi/v5"
	"github.com/google/wire"
)

// Injectors from wire.go:

func InitServerAPI(configuration config.Config) (*chi.Mux, error) {
	db, err := config.NewSQLiteGorm(configuration)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(db)
	userService := service.NewUserService(userRepository)
	userController := controller.NewUserController(userService)
	postRepository := repository.NewPostRepository(db)
	postService := service.NewPostService(postRepository)
	postController := controller.NewPostController(postService)
	commentRepository := repository.NewCommentRepository(db)
	commentService := service.NewCommentService(commentRepository)
	commentController := controller.NewCommentController(commentService)
	mux := server.NewRoutes(userController, postController, commentController)
	return mux, nil
}

// wire.go:

var userSet = wire.NewSet(repository.NewUserRepository, service.NewUserService, controller.NewUserController)

var postSet = wire.NewSet(repository.NewPostRepository, service.NewPostService, controller.NewPostController)

var commentSet = wire.NewSet(repository.NewCommentRepository, service.NewCommentService, controller.NewCommentController)
